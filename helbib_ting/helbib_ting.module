<?php

function helbib_ting_preprocess_ting_object(&$vars) {
  helbib_ting_object_update($vars['object']);
}

function helbib_ting_preprocess_ting_collection(&$vars) {
  helbib_ting_collection_update($vars['collection']);
}

function helbib_ting_preprocess_ting_search_collection(&$vars) {
  helbib_ting_collection_update($vars['collection']);
}

/**
 * Update the values of a Ting collection based on local rules.
 */
function helbib_ting_collection_update(&$collection) {
  foreach ($collection->objects as $object) {
    $object = clone $object;
    helbib_ting_object_update($object);
    $collection->subjects += $object->subjects;
  }
  array_unique($collection->subjects);
}

/**
 * Update the values of a Ting object based on local rules.
 */
function helbib_ting_object_update(&$object) {
  // Add more information to subjects.
  if (is_array($object->record['dc:subject']['oss:sort'])) {
    $object->subjects = array_merge($object->subjects, $object->record['dc:subject']['oss:sort']);
  }

  // Add spatial information to subjects.
  if (is_array($object->record['dcterms:spatial']['dkdcplus:DBCF'])) {
    $object->subjects = array_merge($object->subjects, $object->record['dcterms:spatial']['dkdcplus:DBCF']);
  }
  if (is_array($object->record['dcterms:spatial'][''])) {
    $object->subjects = array_merge($object->subjects, $object->record['dcterms:spatial']['']);
    // Prevent general spatial terms from apperaring multiple times
    unset($object->record['dcterms:spatial']['']);
  }

  // Add temporal information to subjects.
  if (is_array($object->record['dcterms:temporal']['dkdcplus:DBCP'])) {
    $object->subjects = array_merge($object->subjects, $object->record['dcterms:temporal']['dkdcplus:DBCP']);
  }

  // If an object is a part of a collection and the collection exists as
  // a relation then make the relation a link
  if (!empty($object->record['dcterms:isPartOf'][''])) {
    foreach ($object->record['dcterms:isPartOf'][''] as &$isPartOf) {
      if (isset($object->relations)) {
        foreach ($object->relations as $related_object) {
          // The relation must be a "isPartOfManifestation" type. Since objects
          // can be related to other objects which the library cannot access we
          // only show links if:
          // - the owner id of the related object matches the id of the original object.
          //   If the library has access to the original item we assume they also have
          //   access to the other.
          // - the owner id matches the agency of the library configured in Ding.
          if ($related_object->relationType == 'isPartOfManifestation' &&
              ($related_object->ownerId == $object->ownerId ||
               $related_object->ownerId == variable_get('ting_agency', NULL))) {
            $isPartOf = l($isPartOf, 'ting/object/' . $object->id,
                          array('attributes' => array('title' => t('Go to containing item %title', array('%title' => $related_object->title)))));
            break;
          }
        }
      }
    }
  }
}